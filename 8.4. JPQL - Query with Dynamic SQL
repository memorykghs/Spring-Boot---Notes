# 8.4. JPQL - Query with Dynamic SQL

在不同的專案中，有時候會用不同的方法來達到根據傳入參數，動態調整 SQL 查詢條件，以 eBAF 專案為例，如果今天有一個 SQL 長這樣：

``` SQL
select *
 from STUDENT.TB_EMP
 where 1 = 1
 [ and EMP_ID = ':EMP_ID']
 [ and EMP_NAME = ':EMP_NAME']
 [ and CREAT_USER = ':CREAT_USER']
 [ and CREAT_DATE = ':CREAT_DATE']
```

當有傳入相對應的參數時，才解開對應的 SQL，也就是說如果傳入 EMP_ID 參數，那麼最後得到的 SQL 應該要長成下面這個樣子：

``` SQL
select *
 from STUDENT.TB_EMP
 where 1 = 1
 and EMP_ID = :EMP_ID
```

為了達到這個目的，我們就必須在 `SqlUtils.java` 中新增一些方法，來對既有的 SQL 做處理，處理動態 SQL 的讀取以及設定查尋欄位等功能。

``` 
|--com.example.demospringboot
   |--DemospringbootApplication.java
|--com.example.demospringboot.configuration
   |--SwaggerConfig.java
   |--RestConfiguration.java
|--com.example.demospringboot.controller
   |--TestController.java
   |--ProductController.java
   |--EmpController.java // 修改的檔案
|--com.example.demospringboot.entity
   |--Car.java
   |--CarPK.java
|--com.example.demospringboot.model
   |--Product.java
|--com.example.demospringboot.repository
   |--CarRepository.java
|--com.example.demospringboot.service
   |--CarService.java
   |--ProductService.java
|--com.example.demospringboot.service.impl
   |--CarServiceImpl.java
   |--ProductServiceImpl.java
|--com.example.demospringboot.service.sql
   |--SqlAction.java // 修改的檔案
   |--SqlUtils.java // 修改的檔案
|--sql
   |--FIND_BY_PK_001
   |--FIND_001 // 新增的檔案
```

首先先在 `sql` 資料夾 ( folder ) 建立一個新 SQL 檔 `FIND_001` ：

``` SQL
select *
 from STUDENT.TB_EMP
 where 1 = 1
 [ and EMP_ID = :EMP_ID]
 [ and EMP_NAME = :EMP_NAME]
 [ and CREAT_USER = :CREAT_USER]
 [ and CREAT_DATE = :CREAT_DATE]
```

先修改 `SqlUtils.java` Class：

``` java
@Component
public class SqlUtils {

   /**
    * 取得並組成動態查詢SQL
    * @param sqlName
    * @param dataMap
    * @return
    * @throws IOException
    */
   public String getDynamicQuerySQL(String sqlName, Map<String, Object> paramsMap) throws IOException {
      String originSql = getSQLStr(sqlName);
      return getQuerySql(originSql, paramsMap);
    }

   /**
    * 讀取指定SQL檔案
    * @param sqlName
    * @throws IOException
    */
   public String getQuerySql(String sqlName) throws IOException {
      return getSQLStr(sqlName, null, null);
   }

   private String getSQLStr(String sqlName, String[] queryFields, String[] orderBy) throws IOException {
      ClassPathResource resource = new ClassPathResource("sql/" + sqlName);
      InputStream dbAsStream = resource.getInputStream();
      StringBuilder sb = new StringBuilder();

      try (BufferedReader br = new BufferedReader(new InputStreamReader(dbAsStream))) {
         while (br.ready()) {
            sb.append(br.readLine());
         }
      }

      String sql = sb.toString();
      return sql;
   }

   /**
    * 組動態查詢條件SQL
    * @param sql
    * @param paramsMap
    */
   private String getQuerySql(String sql, Map<String, Object> paramsMap) {

      // 檢查SQL檔案中有沒有動態查詢條件
      String[] str = StringUtils.substringsBetween(sql, "[", "]");
      if (str == null) {
         return sql;
      }

      Pattern pattern = Pattern.compile("\\:(\\S*)");

      List<String> strList = Arrays.asList(str); // 將Array轉換成List
      List<String> getStrList = new ArrayList<>();
      Set<String> keySet = paramsMap.keySet();

      // 替換SQL內動態參數語句的冒號
      for (String s : strList) {
         Matcher matcher = pattern.matcher(s);
         List<String> subStrList = new ArrayList<>();

         while (matcher.find()) {
            subStrList.add(matcher.group(0).replace(":", ""));
         }

         int subStrListSize = subStrList.size();
         if (subStrListSize == 0 || !keySet.containsAll(subStrList)) { // 比對傳入參數
            continue;
         }

         getStrList.add(s); // 要刪除的SQL

      }

      strList = new ArrayList<>(strList);
      strList.removeAll(getStrList);

      for (String s : strList) {
         sql = StringUtils.replace(sql, s, "");
      }
      sql = sql.replace("[", "").replace("]", "");

      return sql;
   }
}
```

需要注意的是， `Matcher` 及 `Pattern` 兩個套件都是引入正規表達式相關的 `java.util.regex` 套件。import 套件內容如下：

``` java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.core.io.ClassPathResource;
```

`getQuerySql()` 這個方法在做的事情是：
1. 判斷讀入的 SQL 檔案中有沒有含有動態 SQL 條件，如果有的話取出 `[` 及 `]` 中間的字串。

   ```java
   String[] str = StringUtils.substringsBetween(sql, "[", "]");
   if (str == null) {
      return sql;
   }
   ```

   以目前這個範例而言，會取得內容入下的陣列 ( Array )：

   ```
   [ 
      and EMP_ID = :EMP_ID,
      and EMP_NAME = :EMP_NAME,
      and CREAT_USER = :CREAT_USER,
      and CREAT_DATE = :CREAT_DATE
   ]
   ```
<br/>

2. 再來使用正規表達式，指定要篩選的 pattern，在回圈中取代 Array 中每個內容的冒號：
   ```java
   Pattern pattern = Pattern.compile("\\:(\\S*)");
   ...

   for (String s : strList) {
      Matcher matcher = pattern.matcher(s);
      List<String> subStrList = new ArrayList<>();

      while (matcher.find()) { // 替換SQL內動態參數
         System.out.println("----->" + s);
         subStrList.add(matcher.group(0).replace(":", ""));
      }

      ...
   }
   ```

   ```
   [ 
      and EMP_ID = EMP_ID,
      and EMP_NAME = EMP_NAME,
      and CREAT_USER = CREAT_USER,
      and CREAT_DATE = CREAT_DATE
   ]
   ```
<br/>

3. 接著根據傳入的參數 `Map` 一一比對，篩選要留下來的 SQL 條件，並將留下來的條件合併回原本的 SQL。

   ```java
   for (String s : strList) {
      ...
      
      int subStrListSize = subStrList.size();
      if (subStrListSize == 0 || !keySet.containsAll(subStrList)) { // 比對傳入參數
         continue;
      }

      getStrList.add(s); // 要刪除的SQL
   }

   strList = new ArrayList<>(strList);
   strList.removeAll(getStrList); // 刪除不符合的SQL

   for (String s : strList) {
      sql = StringUtils.replace(sql, s, "");
   }
   sql = sql.replace("[", "").replace("]", "");

   return sql;
   ```

   如果傳入參數只有設定 `EMP_ID`，則最後拿到的 SQL 會長這樣：

   ```SQL
   select * from STUDENT.TB_EMP where 1 = 1  and EMP_ID = :EMP_ID
   ```
<br/>

Hibernate 會自動幫我們把動態參數的地方轉成如 PrepareStatement 的形式：
<img src="/images/88888.png" />
<br/>

完成後在 `SqlAction.java` 中新增查詢方法。因為傳入的參數集合通常會以 Map 的形式傳入，所以需要遍歷 Map 中的所有內容，再透過 `Query` 物件的 `setParameter(key, value)` 方法設定參數。

``` java
@Configuration
public class SqlAction {

   @Autowired
   private EntityManager entityManager;

   public <T> List<T> queryMagicianBySql(String sql, Map<String, Object> paramsMap) {
      Query query = entityManager.createNativeQuery(sql);
        
      Set<String> keySet = paramsMap.keySet();
      for(String key : keySet){
         query.setParameter(key, paramsMap.get(key));
      }

      return query.getResultList();
   }
}
```

最後在 EmpController.java 中新增要打進來的 url 及方法：

``` java
@RestController
public class EMPController {

   @Autowired
   private SqlAction sqlAction;
    
   @Autowired
   private SqlUtils sqlUtils;
 
   @RequestMapping(value = "/empNameByDynamicSql", method = RequestMethod.GET)
   public <T> List<T> queryEmpByDynamicSql(RequestEntity<Map<String, Object>> requestEntity) throws IOException{
      String sql = sqlUtils.getDynamicQuerySQL("FIND_001", requestEntity.getBody());
      return sqlAction.queryBySql(sql);
   }
}
```

測試後的結果如下：
![ ](/images/8.4-1.png)
<br/>

## 參考
https://docs.oracle.com/javase/8/docs/api/java/util/List.html#removeAll-java.util.Collection- 
