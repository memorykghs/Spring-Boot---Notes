# 9.2 使用 ObjectMapper 與其它狀況
在上一章我們使用 ObjectMapper 物件來幫我們在 Entity 跟 DTO 之間轉換，假設今天 Response 的格式需要多一個 `test` 欄位，所以我們先在 `CarResponse.java` 中加入一個屬性 `test`。

```
|--com.example.demospringboot
   |--DemospringbootApplication.java
|--com.example.demospringboot.configuration
   |--SwaggerConfig.java
   |--RestConfiguration.java
|--com.example.demospringboot.controller
   |--CarController.java
   |--TestController.java
   |--ProductController.java
|--com.example.demospringboot.dto
   |--CarRequest.java 
   |--CarResponse.java // 修改的檔案
|--com.example.demospringboot.entity
   |--CarEntity.java
   |--CarPKEntity.java
|--com.example.demospringboot.model
   |--Product.java
|--com.example.demospringboot.repository
   |--CarRepository.java
|--com.example.demospringboot.service
   |--CarService.java
   |--ProductService.java
|--com.example.demospringboot.service.impl
   |--CarServiceImpl.java
   |--ProductServiceImpl.java
```

``` Java
public class CarResponse {
   @JsonProperty("Message")
   private String message;
    
   @JsonProperty("Datas")
   private List<Data> datas;

   public String getMessage() {
      return message;
   }

   public void setMessage(String message) {
      this.message = message;
   }
    
   public List<Data> getDatas() {
      return datas;
   }

   public void setDatas(List<Data> datas) {
      this.datas = datas;
   }

   public static class Data {
      @JsonProperty("Manufacturer")
      private String manufacturer;

      @JsonProperty("Type")
      private String type;

      @JsonProperty("Min_Price")
      private BigDecimal minPrice;

      @JsonProperty("Price")
      private BigDecimal price;

      @JsonProperty
      private String test;

      public String getManufacturer() {
         return manufacturer;
      }

      public void setManufacturer(String manufacturer) {
         this.manufacturer = manufacturer;
      }

      public String getType() {
         return type;
      }

      public void setType(String type) {
         this.type = type;
      }

      public BigDecimal getMinPrice() {
         return minPrice;
      }

      public void setMinPrice(BigDecimal minPrice) {
         this.minPrice = minPrice;
      }

      public BigDecimal getPrice() {
         return price;
      }

      public void setPrice(BigDecimal price) {
         this.price = price;
      }

      public String getTest() {
         return test;
      }

      public void setTest(String test) {
         this.test = test;
      }
   }
}
```

啟動專案命發送 Request 會發現 Console 出現如下的錯誤：

```log
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: 
Unrecognized field "test" 
(class com.cathaybk.project.answer.dto.CustomerResponse$Data), 
not marked as ignorable (6 known properties: "test", "SEX", "NAME", "CUSTOMER_ID", "BIRTHDAY", "ID"])
```

原因就是因為兩個物件之間的屬性 ( field ) 是必須全部對應到的，如果其中一個物件的屬性多了或是少了，會導致 mapping 失敗。

這種問題有兩種方法可以解決，第一種是在 `test` 屬性上加上 `@JsonIgnoreProperties(ignoreUnknown = true)` Annotation，讓 ObjectMapper 在做序列化及反序列化時，可以忽略目標類別中不存在的屬性。

```
|--com.example.demospringboot
   |--DemospringbootApplication.java
|--com.example.demospringboot.configuration
   |--SwaggerConfig.java
   |--RestConfiguration.java
|--com.example.demospringboot.controller
   |--CarController.java
   |--TestController.java
   |--ProductController.java
|--com.example.demospringboot.dto
   |--CarRequest.java 
   |--CarResponse.java // 修改的檔案
|--com.example.demospringboot.entity
   |--CarEntity.java
   |--CarPKEntity.java
|--com.example.demospringboot.model
   |--Product.java
|--com.example.demospringboot.repository
   |--CarRepository.java
|--com.example.demospringboot.service
   |--CarService.java
   |--ProductService.java
|--com.example.demospringboot.service.impl
   |--CarServiceImpl.java
   |--ProductServiceImpl.java
```

``` Java
public class CarResponse {
   @JsonProperty("Message")
   private String message;
    
   @JsonProperty("Datas")
   private List<Data> datas;

   public String getMessage() {
      return message;
   }

   public void setMessage(String message) {
      this.message = message;
   }
    
   public List<Data> getDatas() {
      return datas;
   }

   public void setDatas(List<Data> datas) {
      this.datas = datas;
   }

   public static class Data {
      @JsonProperty("Manufacturer")
      private String manufacturer;

      @JsonProperty("Type")
      private String type;

      @JsonProperty("Min_Price")
      private BigDecimal minPrice;

      @JsonProperty("Price")
      private BigDecimal price;

      @JsonProperty
      @JsonIgnoreProperties(ignoreUnknown = true)
      private String test;

      public String getManufacturer() {
         return manufacturer;
      }

      public void setManufacturer(String manufacturer) {
         this.manufacturer = manufacturer;
      }

      public String getType() {
         return type;
      }

      public void setType(String type) {
         this.type = type;
      }

      public BigDecimal getMinPrice() {
         return minPrice;
      }

      public void setMinPrice(BigDecimal minPrice) {
         this.minPrice = minPrice;
      }

      public BigDecimal getPrice() {
         return price;
      }

      public void setPrice(BigDecimal price) {
         this.price = price;
      }

      public String getTest() {
         return test;
      }

      public void setTest(String test) {
         this.test = test;
      }
   }
}
```

第二個方法是在使用 ObjectMapper 時補上 `objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)`，讓 ObjectMapper 在做 mapping 的時候忽略目標類別沒有的屬性。

```
|--com.example.demospringboot
   |--DemospringbootApplication.java
|--com.example.demospringboot.configuration
   |--SwaggerConfig.java
   |--RestConfiguration.java
|--com.example.demospringboot.controller
   |--CarController.java
   |--TestController.java
   |--ProductController.java
|--com.example.demospringboot.dto
   |--CarRequest.java 
   |--CarResponse.java // 修改的檔案
|--com.example.demospringboot.entity
   |--CarEntity.java
   |--CarPKEntity.java
|--com.example.demospringboot.model
   |--Product.java
|--com.example.demospringboot.repository
   |--CarRepository.java
|--com.example.demospringboot.service
   |--CarService.java
   |--ProductService.java
|--com.example.demospringboot.service.impl
   |--CarServiceImpl.java // 修改的檔案
   |--ProductServiceImpl.java
```

```java
@Service
public class CarServiceImpl implements CarService {
   @Autowired
   private CarRepository carRepository;

   @Override
   public List<CarEntity> queryAllCar() {
      return carRepository.findAll();
   }

   @Override
   public CarResponse queryCar(CarRequest carRequest) {
      String manufacturer = carRequest.getManufacturer();
      String type = carRequest.getType();
      List<CarEntity> list = carRepository.findByManufacturerAndType(manufacturer, type);

      CarEntity carEntity = list.get(0);
      CarResponse carResponse = new CarResponse();

      CarResponse.Data responseInnerData = new CarResponse.Data();
      
      // ObjectMapper：Java Code 轉 json
      ObjectMapper objectMapper = new ObjectMapper();
      objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); // 新增
      objectMapper.convertValue(carEntity, CarResponse.Data.class);

      List<CarResponse.Data> datas = new ArrayList<>();
      datas.add(responseInnerData);
        
      carResponse.setDatas(datas);
      carResponse.setMessage("success");

      return carResponse;
   }
}		
```

``` Java
public class CarResponse {
   @JsonProperty("Message")
   private String message;
    
   @JsonProperty("Datas")
   private List<Data> datas;

   public String getMessage() {
      return message;
   }

   public void setMessage(String message) {
      this.message = message;
   }
    
   public List<Data> getDatas() {
      return datas;
   }

   public void setDatas(List<Data> datas) {
      this.datas = datas;
   }

   public static class Data {
      @JsonProperty("Manufacturer")
      private String manufacturer;

      @JsonProperty("Type")
      private String type;

      @JsonProperty("Min_Price")
      private BigDecimal minPrice;

      @JsonProperty("Price")
      private BigDecimal price;

      @JsonProperty
      private String test;

      public String getManufacturer() {
         return manufacturer;
      }

      public void setManufacturer(String manufacturer) {
         this.manufacturer = manufacturer;
      }

      public String getType() {
         return type;
      }

      public void setType(String type) {
         this.type = type;
      }

      public BigDecimal getMinPrice() {
         return minPrice;
      }

      public void setMinPrice(BigDecimal minPrice) {
         this.minPrice = minPrice;
      }

      public BigDecimal getPrice() {
         return price;
      }

      public void setPrice(BigDecimal price) {
         this.price = price;
      }

      public String getTest() {
         return test;
      }

      public void setTest(String test) {
         this.test = test;
      }
   }
}
```
<br/>

## 參考
https://blog.csdn.net/jiangyu1013/article/details/80409082 
https://blog.csdn.net/gavincook/article/details/46574661