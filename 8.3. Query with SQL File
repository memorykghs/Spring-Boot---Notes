# 8. Query with Dynamic SQL - 1
如果今天 SQL 是以檔案的形式記錄，我們就必須從指令的路徑讀取相對 SQL 檔案在進行查詢。所以接下來會新增一個專門用來讀取 SQL 檔案的 Class `SqlUtils.java`。

```
|--com.example.demospringboot
   |--DemospringbootApplication.java
|--com.example.demospringboot.configuration
   |--SwaggerConfig.java
   |--RestConfiguration.java
|--com.example.demospringboot.controller
   |--TestController.java
   |--ProductController.java
   |--EmpController.java // 修改的檔案
|--com.example.demospringboot.entity
   |--Car.java
   |--CarPK.java
|--com.example.demospringboot.model
   |--Product.java
|--com.example.demospringboot.repository
   |--CarRepository.java
|--com.example.demospringboot.service
   |--CarService.java
   |--ProductService.java
|--com.example.demospringboot.service.impl
   |--CarServiceImpl.java
   |--ProductServiceImpl.java
|--com.example.demospringboot.service.sql
   |--SqlAction.java // 修改的檔案
   |--SqlUtils.java // 新增的檔案
|--sql
   |--FIND_BY_PK_001 // 新增的檔案
```

首先先在 `src/main/java` 這個路徑下新增一個資料夾 ( folder )，再建立一個新檔案 ( file ) `FIND_BY_PK_001`，將 SQL 寫在這個檔案內。動態傳入的參數一樣使用 `：` ( 冒號 ) 加上參數名稱表示。

```sql
select EMP_NAME
 from STUDENT.TB_EMP
 where EMP_ID = :EMP_ID
```

由於是從指定資料夾讀入 SQL ，所以我們需要先建立一個 `SqlUtils.java` Class，專門用來處理 SQL 檔案的讀取以及設定查尋欄位等功能。需要注意的是，我們要加入 `@Component`，讓這個 Class 可以被當作是一個元件被使用。

```java
@Component
public class SqlUtils {

   /**
    * 取得查詢SQL
    * @param sqlName
    * @throws IOException
    */
   public String getQuerySql(String sqlName) throws IOException {
      return getSQLStr(sqlName);
   }

   /*
    * 讀取指定SQL檔案
    * @param sqlName
    * @throws IOException
    */
   private String getSQLStr(String sqlName) throws IOException {
      ClassPathResource resource = new ClassPathResource("sql/" + sqlName); // 指定SQL讀檔路徑
      InputStream dbAsStream = resource.getInputStream();

      StringBuilder sb = new StringBuilder();

      try (BufferedReader br = new BufferedReader(new InputStreamReader(dbAsStream))) {
         while (br.ready()) {
            sb.append(br.readLine());
         }
      }

      String sql = sb.toString();
      return sql;
   }
}
```

完成後在 `SqlAction.java` 中新增查詢方法，所有跟 SQL 檔案的操作都會透過這支程式來做。要取得相對應的 SQL 檔只需要傳入相對應的檔案名稱就可以了，其他的解析交給剛剛新增的 `SqlUtils.java`。

```java
@Configuration
public class SqlAction {

   @Autowired
   private EntityManager entityManager;

   public <T> List<T> queryBySql(String sql, Map<String, Object> paramsMap) {
      Query query = entityManager.createNativeQuery(sql);
      query.setParameter("EMP_ID", paramsMap.get("empID"));
      return query.getResultList();
   }
}
```

最後在 EmpController.java 中新增方法：

```java
@RestController
public class EMPController {   

   @Autowired
   private SqlAction sqlAction;
    
   @Autowired
   private SqlUtils sqlUtils;

   @RequestMapping(value = "/empNameBySql", method = RequestMethod.GET)
   public <T> List<T> queryEmpByDynamicSql(RequestEntity<Map<String, Object>> requestEntity) throws IOException{
      String sql = sqlUtils.getQuerySql("FIND_BY_PK_001");
      return sqlAction.queryBySql(sql, requestEntity.getBody());
   }
}
```
在 Controller 中傳入參數的部份我們直接使用 `RequestEntity` 作為傳入參數主體，如果需要定義傳入物件格式，可以再另外定義 `EmpRequest` 及 `EmpResponse` DTO 物件。( 下面會提到如何定義 request 及 response 物件格式。)

最後在 Postman 輸入相對應的 url ，並在 Body 中輸入參數，便可以拿到我們想要的資料。
```
{
    "empID": "12345"
}
```

![ ](/images/8.3-1.png)

## 參考

## 資源
https://mvnrepository.com/artifact/org.apache.commons/commons-lang3/3.0 
